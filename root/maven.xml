<!--  
    | maven.xml files
    | _______________
    | The maven.xml scripts are NOT maven1 build files,  while they are Ant scripts used to deploy Alfresco artifacts 
    | to a Maven repository (by default maven.alfresco.com).
    |
    | This file deploys main Community artifacts to a Maven repository. 
    |  
    | Accepted properties:
    | ____________________
    | -DisRelease=[true|false] ==> Switches between a RELEASE and SNAPSHOT deployment (default: SNAPSHOT) 
    | -Dmaven.custom.label=customLabel ==> Adds a suffix to artifacts, e.g. for branch deployment
    |
    | Usage:
    | ______
    | The 'maven-deploy' target by default deploys a SNAPSHOT to the snapshot repo, otherwise deploys a release if the build is invoked with
    |
    | -Dmaven.isRelease=true
    |
    | This script deploys Community packages and depends already on all required build targets to produce artifacts:
    |
    | NOTE: maven-deploy assumes artifacts have already been build. Use the maven-build-deploy target instead to build and deploy in a single execution. 
    |
    | - For a Community SNAPSHOT deploy you can run it with: ant -f continuous.xml maven-deploy
    | - For a Community RELEASE deploy you can run it with: ant -f continuous.xml maven-deploy -Dmaven.isRelease=true
    | 
    | Branch releases:
    | ________________
    | It's also possible to use a custom suffix to label special artifacts (e.g. deployed from a branch), by passing the following property -Dmaven.custom.label=mylabel
    | to the build command line. This will append this suffix to the version of all deployed artifacts.
    | 
    | Prerequisites:
    | ______________
    | - Needs to be run in continous.xml environment, so run your build with -f continuous.xml 
    | - Does NOT need Maven installed. Will download Maven 2.1.10 embedded
    | - export ANT_OPTS="-XX:MaxPermSize=128m" otherwise you'll get OOM/PermGen
    | - check the "maven-prerequisites" target in root/maven.xml to see which standard build targets maven-deploy depends to
    | - need to add server credentials to standard Maven ~/.m2/settings.xml (if not configured in BINARIES)
    |
    -->
<project name="maven" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

    <dirname property="alfresco.basedir" file="${ant.file.alfresco}"/>
    <!-- 
        | Allows to deploy custom labeled artifacts (e.g. from a branch). 
        | By default no custom label is specified. 
        | Specify one by passing the command line switch: -Dmaven.custom.label=mybranch 
        | Artifacts will be deployed with that custom label appended
        --> 
    <target name="configure-custom-version" if="maven.custom.label">
       <property name="maven.version.suffix" value="-${maven.custom.label}"/>
    </target>

    <target name="configure-empty-custom-version" unless="maven.custom.label">
        <property name="maven.version.suffix" value=""/>
    </target>
	
    <!-- Aggregator target putting together all configs/tasks needed for maven-deploy. Fails if build number is unset, requires continous.xml -->
    <target name="maven-env-prerequisites" depends="fail-if-build-number-is-unset">
	    <!-- Defining the maven ant tasks at runtime -->
        <path id="maven-ant-tasks.classpath" path="${dir.project.3rdparty.lib}/maven-ant-tasks-2.1.3.jar" />
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml"  uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />
        <!-- Configuring the settings location -->
        <property name="maven.settings.file" value="${dir.name.binaries}/build-classpath/settings.xml"/>
        <condition property="maven.isRelease">
            <istrue value="${env.bamboo_deploy_as_release}"/>
        </condition>
    </target>
	
    <!-- Conditionally calls set-build-number. Fails if not in continuous.xml environment -->
    <target name="fail-if-build-number-is-unset" unless="version.number">
        <echo>Maven deployment targets need to be run in continuous.xml environment, as they depend on set-build-number. Failing...</echo> 
        <fail message="Maven deployment needs to be run in continuous environment. Try calling set-build-number first or directly running ant -f continuous.xml maven-build-deploy [-Dbuild.script=enterpriseprojects/build.xml]"/>
    </target>

    <!-- Configures for SNAPSHOT deployment in case it's not a release -->
    <target name="configure-snapshot-deployment" unless="maven.isRelease" depends="configure-custom-version,configure-empty-custom-version">
    	<echo>Configuring Maven Snapshot deployment</echo>
    	<property name="maven.repo.url" value="${maven.repository.snapshots.url}" />
        <property name="maven.repo.id" value="${maven.repository.snapshots.id}"/>
        <property name="maven.version.number" value="${version.number}${maven.version.suffix}-SNAPSHOT"/>
    	<echo>Configured Snapshot deployment of Alfresco ${file.name.edition} ${version.number} to ${maven.repo.url} as ${maven.group.id} alfresco-* ${maven.version.number} artifacts</echo>
    </target>

    <!-- Configures for release deployment in case it's a release ==> -DisRelease=true -->
    <target name="configure-release-deployment" if="maven.isRelease" depends="configure-custom-version,configure-empty-custom-version">
    	<echo>Configuring Maven Release deployment</echo>
    	<property name="maven.repo.url" value="${maven.repository.url}" />
        <property name="maven.repo.id" value="${maven.repository.id}"/>
        <property name="maven.version.number" value="${version.number}${maven.version.suffix}"/>
    	<echo>Configured Release deployment of Alfresco ${file.name.edition} ${version.number} to ${maven.repo.url} as ${maven.group.id} alfresco-* ${maven.version.number}</echo>
    </target>
	
    <!--
        | Deploys projects/*/build/dist JARs/WARs/ZIPs to a Maven repository configured via properties.
        | NOTE: This goal assumes the artifacts have already been built at an earlier stage. Use maven-build-deploy to build and deploy at once.
        | See beginning of this file for full usage instructions. 
        -->
    <target name="maven-deploy" description="Deploys JAR/WAR/ZIP dist artifacts to the Alfresco Maven Repository" depends="maven-env-prerequisites,configure-snapshot-deployment, configure-release-deployment, maven-deploy-webclient, maven-deploy-slingshot, maven-deploy-solr, maven-deploy-amps, maven-deploy-extras" /> 

    <target name="maven-deploy-webclient" description="Deploys Alfresco Explorer related JARs/WARs to a Maven repository" depends="maven-deploy-webclient-jars, maven-deploy-webclient-webapp" />

    <target name="maven-deploy-slingshot" description="Deploys Alfresco Share related JARs/WARs to a Maven repository" depends="maven-deploy-slingshot-jars, maven-deploy-slingshot-webapp" />

    <target name="maven-deploy-solr" description="Deploys Solr related JARs/WARs to a Maven repository" depends="maven-deploy-solr-jars, maven-deploy-solr-webapp" />

    <target name="maven-deploy-amps" description="Deploys additional Alfresco AMPs to a Maven repository">
        <!-- SPP -->
        <mvndeploy file="${dir.module.spp.dist}/${file.name.amp.spp}"
            artifactId="alfresco-spp" />

        <!-- FDK Repo AMP -->
        <mvndeploy file="${dir.project.fdk.repo.dist}/${file.name.amp.fdk}"
            artifactId="alfresco-fdk-repo" />

        <!-- WCM Quickstart Repo -->
        <mvndeploy file="${dir.module.wcmquickstart.dist}/${file.name.amp.wcmquickstart}"
            artifactId="alfresco-wcm-quickstart-repo" />

        <!-- WCM Quickstart Share -->
        <mvndeploy file="${dir.module.wcmquickstart-share.dist}/${file.name.amp.wcmquickstart-share}"
            artifactId="alfresco-wcm-quickstart-share" />
    </target>

    <target name="maven-deploy-extras" description="Deploys additional Alfresco JARs/WARs/ZIPs to a Maven repository">
        <!-- WCM Quickstart webapp -->
        <mvndeploy file="${dir.project.wcmquickstart-webapp.dist}/${file.name.war.wcmquickstart-webapp}"
            artifactId="alfresco-wcm-quickstart" />

        <!-- Web Service Client -->
        <mvndeploy file="${dir.project.webserviceclient.dist}/${file.name.jar.webserviceclient}"
            artifactId="alfresco-web-service-client"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-web-service-client-src.zip" 
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-web-service-client-doc.zip" />

        <!-- Web Editor JAR -->
        <mvndeploy file="${dir.project.webeditor.dist}/${file.name.jar.webeditor}"
            artifactId="alfresco-webeditor" />

        <!-- Web Editor taglib -->
        <mvndeploy file="${dir.project.webeditor.dist}/${file.name.jar.webeditor.taglib}"
            artifactId="alfresco-webeditor-taglib" />

        <!-- Web Editor plugin -->
        <mvndeploy file="${dir.project.webeditorplugin.dist}/${file.name.jar.webeditor.plugin}"
            artifactId="alfresco-webeditor-plugin" />

        <!-- MMT classes: slim jar, with dependencies in pom.xml -->
        <copy file="${dir.project.3rdparty.lib}/mmt-dependencies/pom-mmt.xml" todir="${dir.continuous.assemble.mmt}" />
        <replace file="${dir.continuous.assemble.mmt}/pom-mmt.xml" summary="true"
            token="VERSION" value="${maven.version.number}" failOnNoReplacements="true" />
        <mvndeploy file="${dir.continuous.assemble.mmt}/main/main.jar"
            artifactId="alfresco-mmt"
            pomFile="${dir.continuous.assemble.mmt}/pom-mmt.xml" />
        <!-- MMT classes -->
        <!-- BDE-85: Temporary comment until we make this right, deploying with a useful pom
        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy-file"/>
            <arg value="-Dfile=${dir.continuous.assemble.mmt}/main/main.jar"/>
            <arg value="-DgroupId=${maven.group.id}"/>
            <arg value="-DartifactId=alfresco-mmt"/>
            <arg value="-Dversion=${maven.version.number}"/>
            <arg value="-Dpackaging=jar"/>
            <arg value="-Durl=${maven.repo.url}"/>
            <arg value="-DrepositoryId=${maven.repo.id}"/>
            <arg value="-s"/>
            <arg value="${maven.settings.file}"/>
        </artifact:mvn>
        -->
    </target>

    <target name="maven-deploy-webclient-jars" description="Deploys Alfresco Explorer related JARs to a Maven repository">
        <!-- Core -->
        <mvndeploy file="${dir.project.core.dist}/${file.name.jar.core}"
            artifactId="alfresco-core"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-core-src.zip"
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-core-doc.zip" />

        <!-- Datamodel -->
        <mvndeploy file="${dir.project.datamodel.dist}/${file.name.jar.datamodel}"
            artifactId="alfresco-data-model"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-datamodel-src.zip"
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-datamodel-doc.zip" />

        <!-- Deployment -->
        <mvndeploy file="${dir.project.deployment.dist}/${file.name.jar.deployment}"
            artifactId="alfresco-deployment"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-deployment-src.zip"
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-deployment-doc.zip" />

        <!-- JLAN Embed -->
        <mvndeploy file="${dir.project.jlan.dist}/${file.name.jar.jlan}"
            artifactId="alfresco-jlan-embed"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-jlan-embed-src.zip"
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-jlan-embed-doc.zip" />

        <!-- Mbeans -->
        <mvndeploy file="${dir.project.mbeans.dist}/${file.name.jar.mbeans}"
            artifactId="alfresco-mbeans" />

        <!-- Remote API -->
        <mvndeploy file="${dir.project.remoteapi.dist}/${file.name.jar.remoteapi}"
            artifactId="alfresco-remote-api"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-remote-api-src.zip"
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-remote-api-doc.zip" />

        <!-- Repository -->
        <mvndeploy file="${dir.project.repository.dist}/${file.name.jar.repository}"
            artifactId="alfresco-repository"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-repository-src.zip"
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-repository-doc.zip" />

        <!-- WDR Deployment -->
        <mvndeploy file="${dir.project.wdrdeployment.dist}/${file.name.jar.wdrdeployment}"
            artifactId="alfresco-wdr-deployment" />

        <!-- Web Client -->
        <mvndeploy file="${dir.project.webclient.dist}/${file.name.jar.webclient}"
            artifactId="alfresco-web-client"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-web-client-src.zip"
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-web-client-doc.zip" />

        <!-- Web Framework Commons -->
        <mvndeploy file="${dir.project.webframeworkcommons.dist}/${file.name.jar.webframeworkcommons}"
            artifactId="alfresco-web-framework-commons"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-web-framework-commons-src.zip"
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-web-framework-commons-doc.zip" />
    </target>
            
    <target name="maven-deploy-webclient-webapp" description="Deploys Alfresco Explorer related WAR to a Maven repository">
        <mvndeploy file="${dir.project.webclient.dist}/${file.name.war.webclient}"
            artifactId="alfresco" />
    </target>

    <target name="maven-deploy-slingshot-jars" description="Deploys Alfresco Share related JARs to a Maven repository">
        <!-- Share JAR -->
        <mvndeploy file="${dir.project.slingshot.dist}/${file.name.jar.slingshot}"
            artifactId="alfresco-share"
            sources="${dir.continuous.assemble.sdk}/src/alfresco-share-src.zip"
            javadoc="${dir.continuous.assemble.sdk}/doc/alfresco-share-doc.zip" />

        <!-- FDK Client JAR  -->
        <mvndeploy file="${dir.project.fdk.client.dist}/${file.name.jar.fdk}"
            artifactId="alfresco-fdk-client" />
    </target>

    <target name="maven-deploy-slingshot-webapp" description="Deploys Alfresco Share related WAR to a Maven repository">
        <mvndeploy file="${dir.project.slingshot.dist}/${file.name.war.slingshot}"
            artifactId="share" />
    </target>

    <target name="maven-deploy-solr-jars" description="Deploys Solr related JARs to a Maven repository">
        <mvndeploy file="${dir.project.solr.dist}/${file.name.jar.solr}"
            artifactId="alfresco-solr-integration" />
    </target>

    <target name="maven-deploy-solr-webapp" description="Deploys Solr related webapp to a Maven Repository">
        <mvndeploy file="${dir.continuous.dist}/${file.name.dist.solr}.zip"
            artifactId="alfresco-solr" />
    </target>

    <macrodef name="mvndeploy">
        <attribute name="file" />
        <attribute name="artifactId" />
        <attribute name="classifier" default="" />
        <attribute name="sources" default="NONE" />
        <attribute name="javadoc" default="NONE" />
        <attribute name="pomFile" default="NONE" />
        <sequential>
            <echo>
            Deploying @{file}
            as ${maven.group.id}:@{artifactId}:${maven.version.number}...</echo>

            <local name="fileabsolute" />
            <local name="sourceUpload" />
            <local name="javadocUpload" />
            <local name="pomUpload" />
            <local name="extension" />
            <property name="fileabsolute" location="@{file}" />
            <condition property="sourceUpload" value="-Dsources=@{sources}" else="">
                <not> <equals arg1="@{sources}" arg2="NONE"/> </not>
            </condition>
            <condition property="javadocUpload" value="-Djavadoc=@{javadoc}" else="">
                <not> <equals arg1="@{javadoc}" arg2="NONE"/> </not>
            </condition>
            <condition property="pomUpload" value="-DpomFile=@{pomFile}" else="">
                <not> <equals arg1="@{pomFile}" arg2="NONE"/> </not>
            </condition>
            <pathconvert property="extension">
                <fileset file="@{file}"/>
                <mapper type="regexp" from="^.*\.(.*)$$" to="\1"/>
            </pathconvert>
            <artifact:mvn>
<!-- for tests
                <arg value="org.apache.maven.plugins:maven-install-plugin:2.4:install-file"/>
-->
                <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy-file"/>
                <arg value="-Dfile=${fileabsolute}"/>
                <arg value="-DgroupId=${maven.group.id}"/>
                <arg value="-DartifactId=@{artifactId}"/>
                <arg value="-Dversion=${maven.version.number}"/>
                <arg value="-Dpackaging=${extension}"/>
                <arg value="-Durl=${maven.repo.url}"/>
                <arg value="-DrepositoryId=${maven.repo.id}"/>
                <arg value="-Dclassifier=@{classifier}"/>
                <arg value="-s"/>
                <arg value="${maven.settings.file}"/>
                <arg line="${sourceUpload} ${javadocUpload} ${pomUpload}"/>
            </artifact:mvn>
        </sequential>
    </macrodef>

</project>
