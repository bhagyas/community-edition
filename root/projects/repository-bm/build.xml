<project name="repository-bm" default="deploy" basedir=".">
  
  <!-- Produce a build id. If using a continuous build process inherit the build id from that ... -->
  <tstamp>
   <format property="build.id" pattern="dMMhhmmss" locale="en"/>
  </tstamp>
  
  
  <property name="jar" value="repository-bm.jar" />
  <property name="zip" value="repository-bm.zip" />
  
  <property file="build.properties" />
  
  <property name="source.path" value="${basedir}/source" />
  <property name="lib.path" value="${basedir}/lib" />
  <property name="3rdparty.lib.path" value="${basedir}/../3rd-party/lib" />
  <property name="build.path" value="${basedir}/build" />
  <property name="classes.path" value="${build.path}/classes" />
  <property name="dist.path" value="${build.path}/dist" />
  
  <!-- The location to store the per run files -->
  <property name="jmeter.result.dir" value="${build.path}/jmeter-results" />
  
  <!-- Should report include response data for failures? -->
  
  <property name="show-data" value="n"/>
  <property name="format" value="2.1"/>
  
  <condition property="funcMode">
    <equals arg1="${show-data}" arg2="y"/>
  </condition>
  
  <condition property="funcMode" value="false">
    <not>
      <equals arg1="${show-data}" arg2="y"/>
    </not>
  </condition>
  
  <property name="jmeter.lib.dir" value="${jmeter.install.dir}/lib"/>
  
  <path id="classpath.ref">
    <fileset dir="${lib.path}">
      <include name="*.jar" />
      <include name="*/*.jar" />
    </fileset>
    <fileset dir="${3rdparty.lib.path}">
      <include name="*.jar" />
      <include name="*/*.jar" />
    </fileset>
  </path>
  
  
  <!-- Use xalan copy from JMeter lib directory to ensure consistent processing with Java 1.4+ -->
  <path id="xslt.classpath">
    <!--
    <fileset dir="${jmeter.lib.dir}" includes="xalan*.jar"/>
    <fileset dir="${jmeter.lib.dir}" includes="serializer*.jar"/>
    -->
    <fileset dir="${lib.path}/saxon" includes="saxon*.jar"/>
  </path>
  
  <!--
  <manifestclasspath property="classpath.manifest" jarfile="${basedir}/${jar}">
    <classpath refid="classpath.ref" />
  </manifestclasspath>
  -->
  
  <!-- Check that the xalan libraries are present -->
  <condition property="xalan.present">
    <and>
      <!-- No need to check all jars; just check a few -->
      <available classpathref="xslt.classpath" classname="org.apache.xalan.processor.TransformerFactoryImpl"/>
      <available classpathref="xslt.classpath" classname="org.apache.xml.serializer.ExtendedContentHandler"/>
    </and>
  </condition>

  <!--
  <target name="_message_xalan" unless="xalan.present">
    <echo>Cannot find all xalan and/or serialiser jars</echo>
    <echo>The XSLT formatting may not work correctly.</echo>
    <echo>Check you have xalan and serializer jars in ${lib.dir}</echo>
  </target>
  -->

  <!--
  <target name="run-jmeter"
          depends="_message_xalan,deploy">
  -->
  <target name="run-jmeter"
          depends="deploy">
    
    <!--
    <fail unless="testname" 
            message="You must supply a testname (.jmx suffix will be added) to run using -Dtestname=[testname]"/>
            
    <fail unless="testdir" 
            message="You must supply a testdir to run using -Dtestdir=[testdir]"/>
    -->
    
    <taskdef name="jmeter"
         classpath="${jmeter.install.dir}/extras/ant-jmeter-1.0.9.jar"
         classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask"/>
    
    <echo>funcMode = ${funcMode}</echo>
    
    <jmeter
         jmeterhome="${jmeter.install.dir}"
         testplan="${testdir}/${testname}.jmx"
         resultlog="${jmeter.result.dir}/${testname}-result-${build.id}.xml"
         failureproperty="jmeter.test.failure">

      <jvmarg value="-Xmx2G"/>
      <jvmarg value="-Duser.dir=${user.dir}"/>
      
      <!-- Force suitable defaults -->
      <property name="jmeter.save.saveservice.output_format" value="xml"/>
      <property name="jmeter.save.saveservice.assertion_results" value="all"/>
      <property name="jmeter.save.saveservice.bytes" value="true"/>
      <property name="file_format.testlog" value="${format}"/>
      <property name="jmeter.save.saveservice.response_data.on_error" value="${funcMode}"/>
    
      <!-- note: can edit certain properties in build.properties such as threads, host etc -->
      <property name="threads" value="${threads}"/>
      <property name="baseurl" value="${baseurl}"/>
      <property name="basefolderpath" value="${basefolderpath}"/>
      <property name="duration" value="${duration}"/>
      
    </jmeter>
    
    <antcall target="timestamp2">
      <param name="message" value="start" />
    </antcall>

    <!-- results report (updated to also show overall TPS) -->
    <xslt 
      classpathref="xslt.classpath"
      force="true"
      in="${jmeter.result.dir}/${testname}-result-${build.id}.xml"
      out="${jmeter.result.dir}/${testname}-results-${build.id}.html"
      style="${basedir}/source/test-resources/jmeter-results-report_21.xsl">
        <param name="showData" expression="${show-data}"/>
    </xslt>
    
    <!-- results detailed report (incuding expand/collapse icons -->
    
    <!--
    <xslt
      classpathref="xslt.classpath"
      force="true"
      in="${jmeter.result.dir}/${testname}-result-${build.id}.xml"
      out="${jmeter.result.dir}/${testname}-results-detail-${build.id}.html"
      style="${jmeter.install.dir}/extras/jmeter-results-detail-report_21.xsl">
        <param name="showData" expression="${show-data}"/>
    </xslt>
    
    <copy todir="${jmeter.result.dir}" flatten="true" includeEmptyDirs="false">
       <fileset dir="${jmeter.install.dir}/extras">
	   <include name="expand.jpg" />
	   <include name="collapse.jpg" />
       </fileset>
    </copy>
    -->
    
    <antcall target="timestamp2">
      <param name="message" value="finish" />
    </antcall>

    <!-- comment-in if you want to stop on failure -->
    <!--
    <fail message="jmeter test failed" if="jmeter.test.failure" /> 
    -->
    
  </target>
  
	<target name="run-jmeter-ftp-seq" description="Execrute JMeter test plan: FTP sequential">
	      <antcall target="run-jmeter">
	         <param name="testname" value="FTP-seq" />
	         <param name="testdir" value="${basedir}/source/test-resources" />
	         <param name="baseurl" value="${baseurl.ftp}"/>
	      </antcall>
	</target> 
	
  <target name="run-jmeter-webdav-seq" description="Execute JMeter test plan: WebDAV sequential">
      <antcall target="run-jmeter">
         <param name="testname" value="WebDAV-seq" />
         <param name="testdir" value="${basedir}/source/test-resources" />
         <param name="baseurl" value="${baseurl.webdav}"/>
      </antcall>
  </target> 
  
  <target name="run-jmeter-webdav-mixed" description="Execute JMeter test plan: WebDAV mixed">
      <antcall target="run-jmeter">
         <param name="testname" value="WebDAV-mixed" />
         <param name="testdir" value="${basedir}/source/test-resources" />
         <param name="baseurl" value="${baseurl.webdav}"/>
      </antcall>
  </target> 
  
  <target name="run-jmeter-cmis-seq" description="Execute JMeter test plan: CMIS sequential">
      <antcall target="run-jmeter">
         <param name="testname" value="CMIS-seq" />
         <param name="testdir" value="${basedir}/source/test-resources" />
         <param name="baseurl" value="${baseurl.cmis}"/>
      </antcall>
  </target>
  
  <target name="run-jmeter-cmis-mixed" description="Execute JMeter test plan: CMIS mixed">
      <antcall target="run-jmeter">
         <param name="testname" value="CMIS-mixed" />
         <param name="testdir" value="${basedir}/source/test-resources" />
         <param name="baseurl" value="${baseurl.cmis}"/>
      </antcall>
  </target>
  
  <target name="run-jmeter-all" description="Execute all JMeter test plans">
      <antcall target="run-jmeter-webdav-seq"/>
      <antcall target="run-jmeter-cmis-seq"/>
      <antcall target="run-jmeter-webdav-mixed"/>
      <antcall target="run-jmeter-cmis-mixed"/>
  </target> 

  <target name="run-jmeter-all-seq" description="Execute all sequential JMeter test plans">
      <antcall target="run-jmeter-webdav-seq"/>
      <antcall target="run-jmeter-cmis-seq"/>
  </target>
  
  
  <target name="jar" depends="build" description="Compile and JAR ...">
        <mkdir dir="${dist.path}" />
    
    <jar destfile="${dist.path}/${jar}" basedir="${classes.path}">
      <!--
      <manifest>
        <attribute name="Class-Path" value="${classpath.manifest}" />
      </manifest>
      -->
    </jar>
  </target>
  
  
  <target name="build" description="Compile ...">
    <mkdir dir="${classes.path}" />
    
    <javac destdir="${classes.path}" 
    	classpathref="classpath.ref" 
    	srcdir="${source.path}" 
        debug="true" />
  	
  </target>
  
  <target name="deploy" depends="jar" description="Build JAR and deploy to JMeter lib/junit ...">
    <copy todir="${jmeter.install.dir}/lib/junit" file="${dist.path}/${jar}" />
    
    <!-- flatten for JMeter JUnit Sampler -->
    <copy todir="${jmeter.install.dir}/lib/junit" flatten="true" includeEmptyDirs="false">
       <fileset dir="${lib.path}" />
    </copy>
    
    <copy todir="${jmeter.install.dir}/lib/junit" flatten="true" includeEmptyDirs="false">
       <fileset dir="${3rdparty.lib.path}">
           <include name="chemistry-opencmis*.jar" />
           <include name="activiation*.jar" />
           <include name="asm*.jar" />
           <include name="jaxb*.jar" />
           <include name="jaxws*.jar" />
           <include name="jsr*.jar" />
           <include name="jopt*.jar" />
           <include name="jython*.jar" />
           <include name="mimepull*.jar" />
           <include name="org.osgi*.jar" />
           <include name="resolver*.jar" />
           <include name="saaj*.jar" />
           <include name="stax*.jar" />
           <include name="streambuffer*.jar" />
           <include name="wstx*.jar" />
       </fileset>
    </copy>
    <copy todir="${jmeter.install.dir}/lib/junit" flatten="true" includeEmptyDirs="false">
       <fileset dir="${3rdparty.lib.path}/commons">
           <include name="commons-logging*.jar" />
           <include name="commons-codec*.jar" />
       </fileset>
    </copy>
  </target>

  <target name="timestamp2">
    <tstamp>
      <format property="current.time" pattern="MM/dd/yyyy hh:mm:ss aa" />
    </tstamp>

    <echo message="${message} ${current.time}" />      
  </target>

  <target name="zip" depends="jar" description="Build ZIP">
    <zip destfile="${basedir}/${zip}">
      <fileset dir="${basedir}" includes="${jar}">
        <include name="build/dist/${jar}"/>
        <include name="lib/*/*.jar"/>
        <include name="source/**"/>
        <include name="build.xml"/>
        <include name="build.properties"/>
        <include name="readme.txt"/>
      </fileset>
    </zip>
  </target>


  
 </project>
